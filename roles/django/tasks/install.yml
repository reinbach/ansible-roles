---
- name: install required packages
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ ansible_support_packages }}"

- name: install required libraries
  pip:
    name: "{{ django_libraries }}"
    state: present
    executable: /usr/bin/pip3

- name: create django group
  group:
    name: "{{ django_group }}"
    state: present

- name: create django user
  user:
    name: "{{ django_user }}"
    group: "{{ django_group }}"
    home: "{{ django_dir }}"

- name: check if version exists
  stat:
    path: "{{ django_dir }}/{{ django_version }}"
  register: version

- name: download project release
  uri:
    src: "{{ django_release_url }}"
    dest: "{{ django_release_file }}"
    headers:
      Authorization: "{{ django_repo_token }}"
    remote_src: yes
  when: not version.stat.exists

- name: unarchive project release
  unarchive:
    src: "{{ django_release_file }}"
    dest: "{{ django_dir }}"
    owner: "{{ django_user }}"
    group: "{{ django_group }}"
    mode: 0755
    exclude:
      - tests
  when: not version.stat.exists

- name: rename project download
  command: "mv {{ django_dir }}/{{ django_repo_name }} {{ django_dir }}/{{ django_version }}"
  args:
    creates: "{{ django_dir }}/{{ django_version }}"
    removes: "{{ django_dir }}/{{ django_repo_name }}"
  when: not version.stat.exists

- name: link project release
  file:
    path: "{{ django_app_dir }}"
    src: "{{ django_dir }}/{{ django_version }}"
    state: link
    owner: "{{ django_user }}"
    group: "{{ django_group }}"
    mode: 0755

- name: install project app libraries
  become: yes
  become_user: "{{ django_user }}"
  command: pipenv install  --ignore-pipfile --deploy
  args:
    chdir: "{{ django_app_dir }}"
  when: not version.stat.exists
