---
- name: Install required packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ drone_packages }}"

- name: Install required libraries
  pip:
    name: docker

- name: create drone group
  group:
    name: "{{ drone_group }}"
    state: present

- name: create drone user
  user:
    name: "{{ drone_user }}"
    group: "{{ drone_group }}"
    home: "{{ drone_working_dir }}"
    groups: docker
    append: yes

- name: make sure relevant directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ drone_user }}"
    group: "{{ drone_group }}"
    mode: 0755
    recurse: yes
  with_items:
    - "{{ drone_config_dir }}"

- name: deploy config file
  notify: restart drone
  become: true
  template:
    src: drone.env.j2
    dest: "{{ drone_env_file }}"
    owner: "{{ drone_user }}"
    group: "{{ drone_group }}"
    mode: 0640

- name: run drone server
  docker_container:
    name: drone-server
    image: "drone/drone:{{ drone_version }}"
    state: started
    restart_policy: always
    volumes:
      - /drone:/var/lib/drone/
      - "{{ drone_working_dir }}/data:/data/"
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      traefik.http.routers.drone-router.rule: "Host(`{{ drone_domain }}`)"
      traefik.http.routers.drone-router.service: "drone-service"
      traefik.http.routers.drone-router.tls.certResolver: "letsencrypt"
      traefik.http.routers.drone-router.entrypoints: "web-secure"
      traefik.http.services.drone-service.loadbalancer.server.port: "80"
    env_file:
      "{{ drone_env_file }}"
  tags:
    - drone

- name: run drone runner
  docker_container:
    name: drone-runner
    image: "drone/drone-runner-docker:latest"
    state: started
    restart_policy: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      "{{ drone_env_file }}"
  tags:
    - drone

- include_role:
    name: traefik
  vars:
    docker_config: "yes"
    label: "{{ drone_domain | regex_replace('\\.', '-') }}"
    domain: "{{ drone_domain }}"
    ip_address: "{{ ansible_default_ipv4.address }}"
