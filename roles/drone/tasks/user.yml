---
- name: check if user exists
  postgresql_query:
    db: "{{ drone_database_name }}"
    login_host: "{{ drone_database_uri }}"
    login_user: "{{ drone_database_user }}"
    login_password: "{{ drone_database_password }}"
    query: SELECT user_id FROM users WHERE user_login = %s
    positional_args:
      - "{{ item.username }}"
  register: user_record

- set_fact:
    user_exists: "{{ user_record.query_result | first }}"
  when: user_record.query_result

- set_fact:
    admin_flag: "--admin"
  when: item.is_admin

- set_fact:
    admin_flag: ""
  when: not item.is_admin

# need to allow time for traefik to get valid cert
- name: wait for drone server
  wait_for:
    host: "https://{{ drone_domain }}"
    delay: 10
  when: user_exists is not defined

- name: update user if exists
  command: "{{ drone_bin }} user update {{ item.username }} {{ admin_flag }}"
  environment:
    DRONE_SERVER: "https://{{ drone_domain }}"
    DRONE_TOKEN: "{{ system_user_token.user_hash }}"
  when: user_exists is defined and item.state == "present"

- name: create user if does not exist and is present
  command: "{{ drone_bin }} user add {{ item.username }} {{ admin_flag }}"
  environment:
    DRONE_SERVER: "https://{{ drone_domain }}"
    DRONE_TOKEN: "{{ system_user_token.user_hash }}"
  when: user_exists is not defined and item.state == "present"

- name: remove user if exists and absent
  command: "{{ drone_bin }} user rm {{ item.username }}"
  environment:
    DRONE_SERVER: "https://{{ drone_domain }}"
    DRONE_TOKEN: "{{ system_user_token.user_hash }}"
  when: user_exists is defined and item.state == "absent"
