---
- name: define cors middleware label
  set_fact:
    cors_middleware: "{{ label }}CORSHeader"
  when: cors_domains is defined

- name: add cors_middle to middlewares list
  set_fact:
    middlewares: "{{ middlewares + [cors_middleware] }}"
  when: cors_middleware != ""

- name: define allowed hosts middleware label
  set_fact:
    allowed_hosts_middleware: "{{ label }}AllowedHosts"
  when: add_allowed_hosts is defined

- name: add allowed_hosts_middle to middlewares list
  set_fact:
    middlewares: "{{ middlewares + [allowed_hosts_middleware] }}"
  when: allowed_hosts_middleware != ""

- name: define ip whitelist middleware label
  set_fact:
    ip_whitelist_middleware: "{{ label }}IpWhiteList"
  when: ip_whitelist is defined

- name: add ip_whitelist_middle to middlewares list
  set_fact:
    middlewares: "{{ middlewares + [ip_whitelist_middleware] }}"
  when: ip_whitelist_middleware != ""

- name: Create traefik systemd unit
  template:
    src: "{{ traefik_systemd_unit_template }}.j2"
    dest: "{{ traefik_systemd_unit_dest }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart traefik

- name: Ensure install, config, and log directories exists
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ traefik_install_dir }}"
    - "{{ traefik_config_dir }}"
    - "{{ traefik_log_dir }}"

- name: Copy traefik config file
  template:
    src: "{{ traefik_template }}.j2"
    dest: "{{ traefik_config_file }}"
    owner: root
    group: root
    mode: 0744
    force: "no"
  notify:
    - Restart traefik

- name: Copy traefik middleware
  template:
    src: "middleware.toml.j2"
    dest: "{{ traefik_config_dir }}/middleware.toml"
    owner: root
    group: root
    mode: 0744

- name: Copy traefik tls options
  template:
    src: "tls_options.toml.j2"
    dest: "{{ traefik_config_dir }}/tls_options.toml"
    owner: root
    group: root
    mode: 0744

- name: Set docker provider
  blockinfile:
    path: "{{ traefik_config_file }}"
    marker_begin: "BEGIN_DOCKER"
    marker_end: "END_DOCKER"
    state: present
    block: |
        [providers.docker]
          endpoint = "unix:///var/run/docker.sock"
  notify:
    - Restart traefik
  when: docker_config == "yes"

- name: Copy traefik dashboard config file
  template:
    src: "{{ traefik_dashboard_config_file }}.j2"
    dest: "{{ traefik_config_dir }}/{{ traefik_dashboard_config_file }}"
    owner: root
    group: root
    mode: 0744

- block:
    - set_fact:
        domains: "{{ domains }} + ['{{ item }}'{% if add_www %}, 'www.{{ item }}'{% endif %}]"
      with_items: "{{ domain_list }}"

    - set_fact:
        final_cors_domains: "{{ domains }}"
      when: cors_domains is defined and cors_domains == "domains"

    - set_fact:
        final_cors_domains: "{{ cors_domains }}"
      when: cors_domains is defined and cors_domains != "domains"

    - set_fact:
        router_rule: "Host(`{{ domains|join('`,`') }}`)"

    - set_fact:
        path_prefix_rules: "{{ path_prefix_rules }} + ['`{{ item }}`']"
      with_items: "{{ add_path_prefixes }}"
      when: (add_path_prefixes|length > 0)

    - set_fact:
        router_rule: "{{ router_rule }} || PathPrefix({{ path_prefix_rules|join(',') }})"
      when: (path_prefix_rules|length > 0) and path_prefix_required == "no"

    - set_fact:
        router_rule: "{{ router_rule }} && PathPrefix({{ path_prefix_rules|join(',') }})"
      when: (path_prefix_rules|length > 0) and path_prefix_required == "yes"

    - name: Add dynamic config
      template:
        src: "{{ traefik_dynamic_config_file }}.j2"
        dest: "{{ traefik_config_dir }}/{{ traefik_config_name }}.toml"
        owner: root
        group: root
        mode: 0744
  when: file_config == "yes"

- name: set htpasswd file
  template:
    src: htpasswd.j2
    dest: "{{ traefik_auth_file }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - users

- name: Ensure traefik service is stopped before traefik update
  service:
    name: traefik
    state: stopped
    enabled: true
  when: traefik_update

- name: Download Traefik binary
  unarchive:
    src: "{{ item.url }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
    remote_src: true
    exclude:
      - CHANGELOG.md
      - LICENSE.md
  with_items:
    - url: "{{ traefik_binary_url }}"
      dest: "{{ traefik_install_dir }}"
  when: traefik_update

- name: Ensure traefik service is enabled and running
  systemd:
    name: traefik
    state: started
    enabled: true
    daemon_reload: true
